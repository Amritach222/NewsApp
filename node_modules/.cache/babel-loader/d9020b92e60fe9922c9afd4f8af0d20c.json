{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\ReactCourse\\\\newsapp\\\\src\\\\components\\\\News.js\";\nimport React, { Component } from 'react';\nimport NewsItem from './NewsItem';\nimport Spinner from './Spinner';\nimport PropTypes from 'prop-types';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class News extends Component {\n  capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.handleNextClick = async () => {\n      this.setState({\n        page: this.state.page + 1\n      });\n      this.updateNews();\n    };\n\n    this.handlePreviousClick = async () => {\n      this.setState({\n        page: this.state.page + 1\n      });\n      this.updateNews();\n    };\n\n    this.fetchMoreData = async () => {\n      this.setState({\n        page: this.state.page + 1\n      });\n      let url = `https://newsapi.org/v2/top-headlines?country=${this.props.country}&category=${this.props.category}&apiKey=7a62fb1796d84c898f39d25146f0ea69&page=${this.state.page}&pageSize=${this.props.pageSize}`;\n      let data = await fetch(url); // it' s a promise the method is wating for the rsponse either failure or success \n\n      let parsedData = await data.json();\n      this.setState({\n        articles: this.state.articles.concat(parsedData.articles),\n        totalResults: parsedData.totalResults\n      });\n    };\n\n    this.state = {\n      articles: [],\n      loading: false,\n      page: 1,\n      totalResults: 0\n    };\n    document.title = `NewsMonkey-${this.capitalizeFirstLetter(this.props.category)}`;\n  }\n\n  async updateNews() {\n    this.props.setProgress(10);\n    this.setState({\n      loading: true\n    });\n    let url = `https://newsapi.org/v2/top-headlines?country=${this.props.country}&category=${this.props.category}&apiKey=7a62fb1796d84c898f39d25146f0ea69&page=${this.state.page}&pageSize=${this.props.pageSize}`;\n    let data = await fetch(url); // it' s a promise the method is wating for the rsponse either failure or success \n\n    let parsedData = await data.json();\n    console.log(parsedData);\n    this.setState({\n      articles: parsedData.articles,\n      totalResults: parsedData.totalResults,\n      loading: false\n    });\n    this.props.setProgress(0);\n  }\n\n  async componentDidMount() {\n    // it is lifecycle method/ it runs after render() method\n    this.updateNews();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        style: {\n          margin: '40px'\n        },\n        children: [\"NewsMonkey - Top Headlines from \", this.capitalizeFirstLetter(this.props.category)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), this.state.loading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 36\n      }, this), \" \", /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        dataLength: this.state.articles.length,\n        next: this.fetchMoreData,\n        hasMore: this.state.articles.length !== this.state.totalResults,\n        loader: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 20\n        }, this),\n        scrollableTarget: \"scrollableDiv\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row \",\n            children: this.state.articles.map(elements => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-md-4\",\n                children: /*#__PURE__*/_jsxDEV(NewsItem, {\n                  title: elements.title ? elements.title.slice(0, 45) : \"\",\n                  description: elements.description ? elements.description.slice(0, 88) : \"\",\n                  imageUrl: elements.urlToImage,\n                  newsUrl: elements.url,\n                  author: elements.author,\n                  date: elements.publishedAt,\n                  source: elements.source\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 21\n                }, this)\n              }, elements.url, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 28\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true);\n  }\n\n}\nNews.defaultProps = {\n  country: 'in',\n  pageSize: 8,\n  category: 'general'\n};\nNews.propTypes = {\n  country: PropTypes.string,\n  pageSize: PropTypes.number,\n  category: PropTypes.string\n};\nexport default News;","map":{"version":3,"sources":["C:/Users/DELL/Documents/ReactCourse/newsapp/src/components/News.js"],"names":["React","Component","NewsItem","Spinner","PropTypes","InfiniteScroll","News","capitalizeFirstLetter","string","charAt","toUpperCase","slice","constructor","props","handleNextClick","setState","page","state","updateNews","handlePreviousClick","fetchMoreData","url","country","category","pageSize","data","fetch","parsedData","json","articles","concat","totalResults","loading","document","title","setProgress","console","log","componentDidMount","render","margin","length","map","elements","description","urlToImage","author","publishedAt","source","defaultProps","propTypes","number"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport NewsItem from './NewsItem'\r\nimport Spinner from './Spinner';\r\nimport PropTypes from 'prop-types'\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\n\r\nexport class News extends Component {\r\n    capitalizeFirstLetter(string){\r\n        return string.charAt(0).toUpperCase()+string.slice(1);\r\n    }\r\n   \r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            articles:[],\r\n            loading:false,\r\n            page:1,\r\n            totalResults:0\r\n        }\r\n        document.title=`NewsMonkey-${this.capitalizeFirstLetter(this.props.category)}`;\r\n    }\r\n    async updateNews(){\r\n        this.props.setProgress(10)\r\n        this.setState({loading:true})\r\n        let url=`https://newsapi.org/v2/top-headlines?country=${this.props.country}&category=${this.props.category}&apiKey=7a62fb1796d84c898f39d25146f0ea69&page=${this.state.page}&pageSize=${this.props.pageSize}`;\r\n        let data= await fetch(url);// it' s a promise the method is wating for the rsponse either failure or success \r\n        let parsedData= await data.json();\r\n        console.log(parsedData);\r\n        this.setState({articles: parsedData.articles,\r\n            totalResults:parsedData.totalResults,\r\n            loading:false\r\n        })\r\n        this.props.setProgress(0)\r\n    }\r\n    async componentDidMount(){// it is lifecycle method/ it runs after render() method\r\n       this.updateNews();\r\n\r\n    }\r\n     handleNextClick= async ()=>{\r\n    \r\n    this.setState({page:this.state.page+1});\r\n    this.updateNews()\r\n    }\r\n    handlePreviousClick= async ()=>{\r\n        this.setState({page:this.state.page+1});\r\n         this.updateNews()\r\n    }\r\n    fetchMoreData= async()=>{\r\n        this.setState({page:this.state.page+1});\r\n        let url=`https://newsapi.org/v2/top-headlines?country=${this.props.country}&category=${this.props.category}&apiKey=7a62fb1796d84c898f39d25146f0ea69&page=${this.state.page}&pageSize=${this.props.pageSize}`;\r\n        let data= await fetch(url);// it' s a promise the method is wating for the rsponse either failure or success \r\n        let parsedData= await data.json();\r\n        this.setState({articles: this.state.articles.concat(parsedData.articles),\r\n            totalResults:parsedData.totalResults,\r\n        })\r\n\r\n    }\r\n    render() {\r\n        \r\n        return (\r\n            <>\r\n            <h1 className=\"text-center\" style={{margin:'40px'}}>NewsMonkey - Top Headlines from {this.capitalizeFirstLetter(this.props.category)}</h1>\r\n           { this.state.loading && <Spinner/> } {/* This state that if the loading is true then show spinner  */}\r\n           <InfiniteScroll\r\n           dataLength={this.state.articles.length}\r\n           next={this.fetchMoreData}\r\n           hasMore={this.state.articles.length!==this.state.totalResults}\r\n           loader={<Spinner/>}\r\n           scrollableTarget=\"scrollableDiv\"\r\n       >\r\n                <div className=\"container\">\r\n                <div className=\"row \">\r\n                {this.state.articles.map((elements)=>{\r\n                    return <div className=\"col-md-4\" key={elements.url}>\r\n                    <NewsItem title={elements.title?elements.title.slice(0,45):\"\"} description={elements.description?elements.description.slice(0,88):\"\"} \r\n                    imageUrl={elements.urlToImage} newsUrl={elements.url} author={elements.author} date={elements.publishedAt} source={elements.source}/>\r\n                </div>\r\n        \r\n                })}\r\n                </div>\r\n                </div>\r\n                </InfiniteScroll>\r\n                {/*<div className=\"container d-flex justify-content-between\" >\r\n                <button type=\"button\" disabled={this.state.page<=1} className=\"btn btn-dark \" onClick={this.handlePreviousClick}> &laquo; Previous</button>\r\n                <button type=\"button\" disabled={this.state.page+1> Math.ceil(this.state.totalResults/ this.props.pageSize)} className=\"btn btn-dark \" onClick={this.handleNextClick}>Next &raquo;</button>\r\n            </div>*/}\r\n            </>\r\n\r\n            \r\n        )\r\n    }\r\n    static defaultProps={\r\n        country:'in',\r\n        pageSize:8,\r\n        category:'general'\r\n    }\r\n    static propTypes={\r\n        country:PropTypes.string,\r\n        pageSize:PropTypes.number,\r\n        category:PropTypes.string\r\n    }\r\n}\r\n\r\nexport default News\r\n"]},"metadata":{},"sourceType":"module"}